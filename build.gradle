// Troubleshooting:
// gradle OutOfMemoryError: PermGen space:
// JAVAOPTS="-Xmx1024M -XX:MaxPermSize=512M"
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (enableSigning && taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def id = "855C7687"//console.readLine("PGP Key Id: ")
        def file = "/home/zhizhelev/.gnupg/secring.gpg"//console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}


ext {
    aGroup = 'ru.primetalk'
// To publish to maven central:
// 1. change version â€” remove SNAPSHOT.
// 2. put _${scalaMajorVersion} in artifact names. (already done)
// 3. enableSigning = true
// 4. issue at shell:
//     gradle uploadArchives
// 5. Login to oss sonatype https://oss.sonatype.org/index.html
// 6. Do migration:
//    - remove synapse-grid-examples from repository,
//    - Close repository,
//    - Release repository.
// The artifacts should appear in Maven Central.
//

    aVersion = '1.3.6-SNAPSHOT'
    enableSigning = false
//    aVersion = '1.3.5'//'1.2.0-SNAPSHOT'
//    enableSigning = true


    scalaMajorVersion = '2.11'
    scalaFullVersion = "${scalaMajorVersion}.4"

    scalaLib = "org.scala-lang:scala-library:${scalaFullVersion}"
    scalaReflect = "org.scala-lang:scala-reflect:${scalaFullVersion}"

    akkaVersion = '2.3.7'
    slf4j = 'org.slf4j:slf4j-api:1.7.7'
    logback = 'ch.qos.logback:logback-classic:1.1.2'
    rxDep = 'com.netflix.rxjava:rxjava-scala:0.20.7'
    junit = 'junit:junit:4.11'
//    scalaTest = "org.scalatest:scalatest_${scalaMajorVersion}:1.9.1"
    scalaTest = "org.scalatest:scalatest_${scalaMajorVersion}:2.2.2"
//    shapelessDep = "com.chuusai:shapeless_${scalaFullVersion}:2.0.0"
    shapelessDep = "com.chuusai:shapeless_${scalaMajorVersion}:2.0.0"
}

allprojects {
    apply plugin: 'idea'

    repositories {
//        mavenLocal()
        mavenCentral()
    }
}


subprojects {
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'eclipse'

    group = aGroup
    version = aVersion


    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    dependencies {
        compile scalaLib

        testCompile junit
        testCompile scalaTest
    }

    // making source.jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // making javadoc.jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // adding source.jar and javadoc.jar to artifacts
    artifacts {
        archives jar

        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
        scalaCompileOptions.useCompileDaemon = true
        // optionally specify host and port of the daemon:
        scalaCompileOptions.daemonServer = "localhost:4243"

        scalaCompileOptions.additionalParameters = ["-feature"]
    }


/*  publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven{ // declare properties in ~/.gradle/gradle.properties
                url nexusRep
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
*/

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-http:2.2"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
//                "https://oss.sonatype.org/service/local/staging/deploy/maven2"
//                "https://oss.sonatype.org/content/repositories/snapshots"
                repository(url: repositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
//              repository (url: nexusRep) {
//					authentication(userName: nexusUsername, password: nexusPassword)	// declare credentials in ~/.gradle/gradle.properties
//				}
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    artifactId "${project.name}_${scalaMajorVersion}"
                    packaging 'jar'
                    description 'SynapseGrid is a framework for constructing reactive real-time immutable data flow systems. ' +
                            '-core contains everything to run a single-threaded system, ' +
                            '-akka contains everything to run systems over Akka actors, ' +
                            '-slf4j - enables logging, ' +
                            '-concurrent - running systems directly over ExecutorContext without the need for Akka, ' +
                            '-examples - a few test systems. Also there are ' +
                            '-frames - a framework for type construction with meta information (see relations.scala). '+
                            '-typed-expressions - a framework for defining parsers and generators for natural language. ' +
                            '' +
                            "The current version is $aVersion"
                    url 'https://github.com/Primetalk/SynapseGrid'
                    parent {
                        groupId 'org.sonatype.oss'
                        artifactId 'oss-parent'
                        version 7
                    }
                    licenses {
                        license {
                            name 'BSD Software License, 2-clause version'
                            url 'https://github.com/Primetalk/SynapseGrid/blob/master/LICENSE.md'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'zhizhelev'
                            name 'Arseniy Zhizhelev'
                            email 'zhizhelev@primetalk.ru'
                        }
                        developer {
                            id 'nehaev'
                            name 'Anton Nehaev'
                            email 'nehaev@primetalk.ru'
                        }
                        developer {
                            id 'popov'
                            name 'Pavel Popov'
                            email 'popov@primetalk.ru'
                        }

                    }

                    scm {
                        url 'https://github.com/Primetalk/SynapseGrid'
                        connection 'scm:git:git@github.com:Primetalk/SynapseGrid.git'
                        developerConnection 'scm:git:git@github.com:Primetalk/SynapseGrid.git'
                    }

                }
            }
        }
    }
    signing {
        required { enableSigning && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}
project(':synapse-grid-core') {}

project(':synapse-grid-slf4j') {
    dependencies {
        compile project(':synapse-grid-core')
        compile slf4j
    }
}

project(':synapse-grid-akka') {
    dependencies {
        compile project(':synapse-grid-slf4j')
        compile "com.typesafe.akka:akka-actor_$scalaMajorVersion:$akkaVersion"
        compile "com.typesafe.akka:akka-remote_$scalaMajorVersion:$akkaVersion"
        compile "com.typesafe.akka:akka-slf4j_$scalaMajorVersion:$akkaVersion"

        testCompile logback
    }
}

project(':synapse-grid-shapeless') {
    dependencies {
        compile project(':synapse-grid-core')
        compile shapelessDep
    }
}

project(':synapse-grid-concurrent') {
    dependencies {
        compile project(':synapse-grid-core')
        compile shapelessDep
    }
}

project(':synapse-grid-rx') {
    dependencies {
        compile project(':synapse-grid-core')
        compile rxDep
    }
}

project(':synapse-grid-examples') {
    dependencies {
        compile project(':synapse-grid-akka')
        compile project(':synapse-grid-rx')
    }
}

project(':synapse-frames') {
    dependencies {
        compile scalaReflect

    }
}

project(':synapse-typed-expressions') {
    dependencies {
        compile project(':russian-lang')
    }
}
project(':russian-lang') {
    dependencies {
    }
}
